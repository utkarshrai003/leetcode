Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be â‰¥ k.
The given num does not contain any leading zero.

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.


Solution with Apprroach:

Lets take an example of the number - 1432219
Looking at it first, we know that we need to remove the numbers 4, 3, 2

But what could be the logic for picking the numbers.

When I first approached this problem, I could see that I need to remove the bigger elements from the front.
My initial approach was to keep moving until you get k numbers greater than the ones traversed.

[1, 4, 3, 2, 2, 1] - by this time, we have 4,3,2 greater than 1, 2, 1 and k is three
So I know I need to remove the largets three elements
But this is screwed up as keeping track of how many numbers are greater in array than th rest one is verry difficult to maintain.

So
The proper apprroach to this problem is by using stack
The main prrinciple being, we need the numberr to be in ascending order
Then only it will be the smallest, the smallest elements appearing first and the grreater ones following them.

So, while pushing an element to the stack, we need to check if this number will not brreak the increasing sequence.
If yes, then pop all(keeping in mind k) the elements greater than current element, and then push the currrent element.

At the end, join the stack and return.

Here is the solution - 

var removeKdigits = function(num, k) {
  var stack = []
  var index = 0
  
  while (index < num.length) {
    var current = parseInt(num[index])
    
    while(stack.length > 0 && current < stack[stack.length - 1] && k > 0) {
      stack.pop()
      k--

      if (k == 0) break
    }

    index++
    stack.push(current)
  }
  
  var res = stack.join('')
  res = res.replace(/^0+/, '')
  return res.slice(0, stack.length - k) || '0'
};

